sd = sd(mean_normalized))
#Gives the table the identifier that all are DHQZ360 treated. Important for downstream plotting
summDHQZ360GFP2aRFPStx52$treatment <- 'DHQZ360'
#combines all GFP2aRFPEMD samples into one dataframe and identifies them as having the GFP2aRFPEMD reporter
summGFP2aRFPStx5 <- rbind(summmockGFP2aRFPStx52,summDHQZ360GFP2aRFPStx52)
summGFP2aRFPStx5$reporter <- 'Stx5'
#Creates a table that gives the mean of each replicate for WT strain and mock treatment and GFP2aRFPEMD.
summmockWTGFP2aRFPStx5BFP <- ddply(.data = subset(alldata, drug == 'mock' & strain == 'WT' & reporter == 'GFP2aRFPStx5BFP'), .variables = 'replicate', summarise,
mean_normalized = mean(normalized))
#Assigns the variable identifying all as WT strain, important for after combining in later step.
summmockWTGFP2aRFPStx5BFP$strain <- 'WT'
#Creates a table that gives the mean of each replicate for 40KO strain, mock treatment and GFP2aRFPEMD reporter.
summmock40KOGFP2aRFPStx5BFP <- ddply(.data = subset(alldata, drug == 'mock' & strain == '40KO' & reporter == 'GFP2aRFPStx5BFP'), .variables = 'replicate', summarise,
mean_normalized = mean(normalized))
#Assigns the variable identifying all as 40KO strain, important for after combining in later step.
summmock40KOGFP2aRFPStx5BFP$strain <- '40KO'
#Combines WT and 40KO into one file of all mock treated means.
summmockGFP2aRFPStx5BFP <- rbind(summmockWTGFP2aRFPStx5BFP,summmock40KOGFP2aRFPStx5BFP)
#Takes the mean of means and standard deviation of means for all mock treated GFP2aRFPEMD samples.
summmockGFP2aRFPStx5BFP2 <- ddply(.data = summmockGFP2aRFPStx5BFP, .variables = 'strain', summarise,
mean = mean(mean_normalized),
sd = sd(mean_normalized))
#Gives the table the identifier that all are mock treated. Important for downstream plotting
summmockGFP2aRFPStx5BFP2$treatment <- 'mock'
#Creates a table that gives the mean of each replicate for WT strain and DHQZ360 treatment and GFP2aRFPEMD.
summDHQZ360WTGFP2aRFPStx5BFP <- ddply(.data = subset(alldata, drug == 'DHQZ360' & strain == 'WT' & reporter == 'GFP2aRFPStx5BFP'), .variables = 'replicate', summarise,
mean_normalized = mean(normalized))
#Assigns the variable identifying all as WT strain, important for after combining in later step.
summDHQZ360WTGFP2aRFPStx5BFP$strain <- 'WT'
#Creates a table that gives the mean of each replicate for 40KO strain, DHQZ360 treatment and GFP2aRFPEMD reporter.
summDHQZ36040KOGFP2aRFPStx5BFP <- ddply(.data = subset(alldata, drug == 'DHQZ360' & strain == '40KO' & reporter == 'GFP2aRFPStx5BFP'), .variables = 'replicate', summarise,
mean_normalized = mean(normalized))
#Assigns the variable identifying all as 40KO strain, important for after combining in later step.
summDHQZ36040KOGFP2aRFPStx5BFP$strain <- '40KO'
#Combines WT and 40KO into one file of all DHQZ360 treated means.
summDHQZ360GFP2aRFPStx5BFP <- rbind(summDHQZ360WTGFP2aRFPStx5BFP,summDHQZ36040KOGFP2aRFPStx5BFP)
#Takes the mean of means and standard deviation of means for all mock treated GFP2aRFPEMD samples.
summDHQZ360GFP2aRFPStx5BFP2 <- ddply(.data = summDHQZ360GFP2aRFPStx5BFP, .variables = 'strain', summarise,
mean = mean(mean_normalized),
sd = sd(mean_normalized))
#Gives the table the identifier that all are DHQZ360 treated. Important for downstream plotting
summDHQZ360GFP2aRFPStx5BFP2$treatment <- 'DHQZ360'
#combines all GFP2aRFPEMD samples into one dataframe and identifies them as having the GFP2aRFPEMD reporter
summGFP2aRFPStx5BFP <- rbind(summmockGFP2aRFPStx5BFP2,summDHQZ360GFP2aRFPStx5BFP2)
summGFP2aRFPStx5BFP$reporter <- 'Stx5BFP'
#Combines all mean of means and standard deviation of means into one file for plotting.
summ <- rbind(summGFP2aRFPStx5, summGFP2aRFPStx5BFP)
summ$reporter <- factor(summ$reporter, levels = c())
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(summ, aes(x = factor(treatment,level=c('mock','DHQZ360')), y = mean, fill = factor(strain,level=c('WT','40KO')))) +
facet_wrap(~reporter, ncol = 6)+
coord_fixed(ratio = 5)+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP-Stx5 Transmembrane Domain:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
View(summ)
rm(list=ls())
#call ggplot2
require(ggplot2)
require(plyr)
require(dplyr)
require(gridExtra)
require(Cairo)
require(reshape2)
#set working directory
#point at folder containing exported data (.csv files) from FlowJo for replicate 1-
setwd("/Volumes/denic_lab/lab/charlene/DataforFig2_covstrans/n_1_11_6_18")
#read in all files in a folder
temp = list.files(pattern="*.csv")
#Give each cell an identifier of what file it is from and assemble them all into one file called 'rep1'
for(i in 1:length(temp)) {
data <- read.csv(temp[i])
data$file <- temp[i]
assign(temp[i],data)
if (exists('rep1')){
rep1 <- rbind(data,rep1)
} else{
rep1 <- data
}
}
#Takes the file name and splits it, allowing you to define variables.
split_fnames <- strsplit(rep1$file, '_')
split_fnames <- data.frame(matrix(unlist(split_fnames), nrow = length(split_fnames), byrow = TRUE))
#Assigns specific variables, you will need to change these based on your experiment.
rep1$strain <- split_fnames$X4
rep1$reporter <- split_fnames$X5
rep1$drug <- split_fnames$X6
rep1$replicate <- 1
View(rep1)
unique(rep1$reporter)
rm(list=ls())
#load dependencies
library(ggplot2)
library(plyr)
library(dplyr)
#Change the following path to point to your clone of the rep1 data
setwd("/Users/akane/R_testing/Morgens_et_al/figure_s4-2/")
#Creates a list of csv files to be processed in this script.
files = list.files(pattern="*s4-2g_rep*")
#Imports the files and gives appropriate variable names, as described in the import function. Binds all fo these files into one dataframe.
data <- lapply(files,import) %>% bind_rows()
#The import function takes the name of a csv file in the active directory and imports it, assigning them variables based on the original filename from their export from FlowJo. This returns a dataframe containing all flow cytometry data with appropriate variable names.
import <- function(f){
data <- read.csv(f)
split_fnames <- strsplit(data$file, '_')
split_fnames <- data.frame(matrix(unlist(split_fnames), nrow = length(split_fnames), byrow = TRUE))
data$replicate <- as.numeric(substr(strsplit(f,'_')[[1]][3],4,4))
data$strain <- split_fnames$X4
data$concentration <- as.character(split_fnames$X7)
data$concentration <- as.numeric(data$concentration)
data
}
#Imports the files and gives appropriate variable names, as described in the import function. Binds all fo these files into one dataframe.
data <- lapply(files,import) %>% bind_rows()
View(data)
#The import function takes the name of a csv file in the active directory and imports it, assigning them variables based on the original filename from their export from FlowJo. This returns a dataframe containing all flow cytometry data with appropriate variable names.
import <- function(f){
data <- read.csv(f)
split_fnames <- strsplit(data$file, '_')
split_fnames <- data.frame(matrix(unlist(split_fnames), nrow = length(split_fnames), byrow = TRUE))
data$replicate <- as.numeric(substr(strsplit(f,'_')[[1]][3],4,4))
data$strain <- split_fnames$X4
data$reporter <- split_fnames$X5
data$BFP <- split_fnames$X6
data$drug <- split_fnames$X7
data
}
#Imports the files and gives appropriate variable names, as described in the import function. Binds all fo these files into one dataframe.
data <- lapply(files,import) %>% bind_rows()
View(data)
View(data)
#Process takes a dataframe consisting of flow cytometry data (data) and the numeric number of replicates (r) and summarizes the data. A control dataframe (ctrl) is created from the data dataframe, which is then used to normalize all observations to their respective controls. The function returns a list of two dataframes. The first element of this list, statdata, is the summarized mean of each replicate for each strain and drug treatment. The second element of this list, plotdata, takes the mean of these replicate means and their standard deviations.
process <- function(data,r){
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'mock' & drug == 'mock'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.FITC.A`),
ratio_sd = sd(`mCherry.A.FITC.A`))
normdata <- lapply(1:r,normalize,d=data,ctrl=ctrl) %>% bind_rows()
statdata <- ddply(.data=normdata, .variables = c('strain','BFP','drug','replicate'), summarize,
mean_normalized = mean(normalized))
plotdata <- ddply(.data=statdata, .variables = c('concentration','strain','drug'),summarize,
mean = mean(mean_normalized),
sd = sd(mean_normalized))
list(statdata,plotdata)
}
#The import function takes the name of a csv file in the active directory and imports it, assigning them variables based on the original filename from their export from FlowJo. This returns a dataframe containing all flow cytometry data with appropriate variable names.
import <- function(f){
data <- read.csv(f)
split_fnames <- strsplit(data$file, '_')
split_fnames <- data.frame(matrix(unlist(split_fnames), nrow = length(split_fnames), byrow = TRUE))
data$replicate <- as.numeric(substr(strsplit(f,'_')[[1]][3],4,4))
data$strain <- split_fnames$X4
data$BFP <- split_fnames$X6
data$drug <- split_fnames$X7
data
}
#Normalize takes a dataframe containing data to be normalized (d), numeric replicate number (rep), and a dataframe containing averaged control data to be normalized to (ctrl). This subsets the d dataframe into a dataframe containing only one replicate and normalizes it to the control of the same replicate. It returns a subset of the dataframe d containing only data points of replicate rep, normalized to the control of their respective replicate.
normalize <- function(d,rep,ctrl){
reps <- subset(data,replicate == rep)
reps$normalized <- reps$`mCherry.A.FITC.A`/ctrl$mean_ratio[which(ctrl$replicate == rep)]
reps
}
#Process takes a dataframe consisting of flow cytometry data (data) and the numeric number of replicates (r) and summarizes the data. A control dataframe (ctrl) is created from the data dataframe, which is then used to normalize all observations to their respective controls. The function returns a list of two dataframes. The first element of this list, statdata, is the summarized mean of each replicate for each strain and drug treatment. The second element of this list, plotdata, takes the mean of these replicate means and their standard deviations.
process <- function(data,r){
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'mock' & drug == 'mock'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.FITC.A`),
ratio_sd = sd(`mCherry.A.FITC.A`))
normdata <- lapply(1:r,normalize,d=data,ctrl=ctrl) %>% bind_rows()
statdata <- ddply(.data=normdata, .variables = c('strain','BFP','drug','replicate'), summarize,
mean_normalized = mean(normalized))
plotdata <- ddply(.data=statdata, .variables = c('concentration','strain','drug'),summarize,
mean = mean(mean_normalized),
sd = sd(mean_normalized))
list(statdata,plotdata)
}
#Change the following path to point to your clone of the rep1 data
setwd("/Users/akane/R_testing/Morgens_et_al/figure_s4-2/")
#Creates a list of csv files to be processed in this script.
files = list.files(pattern="*s4-2g_rep*")
#Imports the files and gives appropriate variable names, as described in the import function. Binds all fo these files into one dataframe.
data <- lapply(files,import) %>% bind_rows()
#Processes the data as described in the process function. Creates a summary of the data broken down by replicate or as mean and standard deviation (elements 1 and 2 of processed object)
processed <- process(data,length(unique(data$replicate)))
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'mock' & drug == 'mock'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.FITC.A`),
ratio_sd = sd(`mCherry.A.FITC.A`))
#Process takes a dataframe consisting of flow cytometry data (data) and the numeric number of replicates (r) and summarizes the data. A control dataframe (ctrl) is created from the data dataframe, which is then used to normalize all observations to their respective controls. The function returns a list of two dataframes. The first element of this list, statdata, is the summarized mean of each replicate for each strain and drug treatment. The second element of this list, plotdata, takes the mean of these replicate means and their standard deviations.
process <- function(data,r){
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'DMSO' & drug == 'mock'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.FITC.A`),
ratio_sd = sd(`mCherry.A.FITC.A`))
normdata <- lapply(1:r,normalize,d=data,ctrl=ctrl) %>% bind_rows()
statdata <- ddply(.data=normdata, .variables = c('strain','BFP','drug','replicate'), summarize,
mean_normalized = mean(normalized))
plotdata <- ddply(.data=statdata, .variables = c('concentration','strain','drug'),summarize,
mean = mean(mean_normalized),
sd = sd(mean_normalized))
list(statdata,plotdata)
}
#Change the following path to point to your clone of the rep1 data
setwd("/Users/akane/R_testing/Morgens_et_al/figure_s4-2/")
#Creates a list of csv files to be processed in this script.
files = list.files(pattern="*s4-2g_rep*")
#Imports the files and gives appropriate variable names, as described in the import function. Binds all fo these files into one dataframe.
data <- lapply(files,import) %>% bind_rows()
#Processes the data as described in the process function. Creates a summary of the data broken down by replicate or as mean and standard deviation (elements 1 and 2 of processed object)
processed <- process(data,length(unique(data$replicate)))
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'mock' & drug == 'DMSO'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.FITC.A`),
ratio_sd = sd(`mCherry.A.FITC.A`))
#The import function takes the name of a csv file in the active directory and imports it, assigning them variables based on the original filename from their export from FlowJo. This returns a dataframe containing all flow cytometry data with appropriate variable names.
import <- function(f){
data <- read.csv(f)
split_fnames <- strsplit(data$file, '_')
split_fnames <- data.frame(matrix(unlist(split_fnames), nrow = length(split_fnames), byrow = TRUE))
data$replicate <- as.numeric(substr(strsplit(f,'_')[[1]][3],4,4))
data$strain <- split_fnames$X4
data$BFP <- split_fnames$X6
data$drug <- split_fnames$X7
data
}
#Normalize takes a dataframe containing data to be normalized (d), numeric replicate number (rep), and a dataframe containing averaged control data to be normalized to (ctrl). This subsets the d dataframe into a dataframe containing only one replicate and normalizes it to the control of the same replicate. It returns a subset of the dataframe d containing only data points of replicate rep, normalized to the control of their respective replicate.
normalize <- function(d,rep,ctrl){
reps <- subset(data,replicate == rep)
reps$normalized <- reps$`mCherry.A.Comp.FITC.A`/ctrl$mean_ratio[which(ctrl$replicate == rep)]
reps
}
#Process takes a dataframe consisting of flow cytometry data (data) and the numeric number of replicates (r) and summarizes the data. A control dataframe (ctrl) is created from the data dataframe, which is then used to normalize all observations to their respective controls. The function returns a list of two dataframes. The first element of this list, statdata, is the summarized mean of each replicate for each strain and drug treatment. The second element of this list, plotdata, takes the mean of these replicate means and their standard deviations.
process <- function(data,r){
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'DMSO' & drug == 'mock'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.Comp.FITC.A`),
ratio_sd = sd(`mCherry.A.Comp.FITC.A`))
normdata <- lapply(1:r,normalize,d=data,ctrl=ctrl) %>% bind_rows()
statdata <- ddply(.data=normdata, .variables = c('strain','BFP','drug','replicate'), summarize,
mean_normalized = mean(normalized))
plotdata <- ddply(.data=statdata, .variables = c('concentration','strain','drug'),summarize,
mean = mean(mean_normalized),
sd = sd(mean_normalized))
list(statdata,plotdata)
}
#Change the following path to point to your clone of the rep1 data
setwd("/Users/akane/R_testing/Morgens_et_al/figure_s4-2/")
#Creates a list of csv files to be processed in this script.
files = list.files(pattern="*s4-2g_rep*")
#Imports the files and gives appropriate variable names, as described in the import function. Binds all fo these files into one dataframe.
data <- lapply(files,import) %>% bind_rows()
#Processes the data as described in the process function. Creates a summary of the data broken down by replicate or as mean and standard deviation (elements 1 and 2 of processed object)
processed <- process(data,length(unique(data$replicate)))
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'mock' & drug == 'mock'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.FITC.A`),
ratio_sd = sd(`mCherry.A.FITC.A`))
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'mock' & drug == 'DMSO'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.FITC.A`),
ratio_sd = sd(`mCherry.A.FITC.A`))
#Process takes a dataframe consisting of flow cytometry data (data) and the numeric number of replicates (r) and summarizes the data. A control dataframe (ctrl) is created from the data dataframe, which is then used to normalize all observations to their respective controls. The function returns a list of two dataframes. The first element of this list, statdata, is the summarized mean of each replicate for each strain and drug treatment. The second element of this list, plotdata, takes the mean of these replicate means and their standard deviations.
process <- function(data,r){
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'mock' & drug == 'DMSO'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.Comp.FITC.A`),
ratio_sd = sd(`mCherry.A.Comp.FITC.A`))
normdata <- lapply(1:r,normalize,d=data,ctrl=ctrl) %>% bind_rows()
statdata <- ddply(.data=normdata, .variables = c('strain','BFP','drug','replicate'), summarize,
mean_normalized = mean(normalized))
plotdata <- ddply(.data=statdata, .variables = c('concentration','strain','drug'),summarize,
mean = mean(mean_normalized),
sd = sd(mean_normalized))
list(statdata,plotdata)
}
#Processes the data as described in the process function. Creates a summary of the data broken down by replicate or as mean and standard deviation (elements 1 and 2 of processed object)
processed <- process(data,length(unique(data$replicate)))
#Process takes a dataframe consisting of flow cytometry data (data) and the numeric number of replicates (r) and summarizes the data. A control dataframe (ctrl) is created from the data dataframe, which is then used to normalize all observations to their respective controls. The function returns a list of two dataframes. The first element of this list, statdata, is the summarized mean of each replicate for each strain and drug treatment. The second element of this list, plotdata, takes the mean of these replicate means and their standard deviations.
process <- function(data,r){
ctrl <- ddply(.data = subset(data,strain=='WT' & BFP == 'mock' & drug == 'DMSO'),.variables = 'replicate', summarize,
mean_ratio = mean(`mCherry.A.Comp.FITC.A`),
ratio_sd = sd(`mCherry.A.Comp.FITC.A`))
normdata <- lapply(1:r,normalize,d=data,ctrl=ctrl) %>% bind_rows()
statdata <- ddply(.data=normdata, .variables = c('strain','BFP','drug','replicate'), summarize,
mean_normalized = mean(normalized))
plotdata <- ddply(.data=statdata, .variables = c('strain','BFP','drug'),summarize,
mean = mean(mean_normalized),
sd = sd(mean_normalized))
list(statdata,plotdata)
}
#Processes the data as described in the process function. Creates a summary of the data broken down by replicate or as mean and standard deviation (elements 1 and 2 of processed object)
processed <- process(data,length(unique(data$replicate)))
View(processed)
#Takes elements 1 and 2 of processed object and makes them their own dataframe objects for ease of plotting and statistical analysis.
statdata <- as.data.frame(processed[1])
plotdata <- as.data.frame(processed[2])
View(plotdata)
unique(plotdata$BFP)
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(concentration))) +
coord_fixed(ratio = 2.5)+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(drug))) +
coord_fixed(ratio = 2.5)+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(drug))) +
coord_fixed(ratio = 2)+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(drug))) +
coord_fixed(ratio = 0.5)+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(drug))) +
coord_fixed(ratio = 10)+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(drug))) +
coord_fixed(ratio = 4)+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(drug))) +
coord_fixed(ratio = 4)+
facet_grid(~strain)+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
?facet_grid
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(drug))) +
coord_fixed(ratio = 4)+
facet_grid(~strain,scales='free_x')+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = factor(drug))) +
facet_grid(~strain,scales='free_x')+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
plotdata$strain = factor(plotdata$strain, level=c('WT','ASNA1KO'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = drug)) +
facet_grid(~strain,scales='free_x')+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = drug)) +
facet_grid(~strain,scales='free_x',scales = 'free_x')+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = drug)) +
facet_grid(~strain,scales='free_x',space = 'free_x')+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
View(plotdata)
#Creates a ggplot as a bar chart with standard deviations as error bars. Proportions can be changed using coor_fixed
ggplot(plotdata, aes(x = factor(BFP,level=c('mock','ASNA1WT','ASNA1D74N','ASNA1A149V','BFP')), y = mean, fill = drug)) +
facet_grid(~strain,scales='free_x',space = 'free_x')+
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.2,
position=position_dodge(.9))+
scale_y_continuous(expand=c(0,0), name ='Normalized Mean RFP:GFP') +
scale_x_discrete(name = '')+
theme(panel.background = element_rect(fill=NA, color = NA),
panel.grid =  element_blank(),
plot.title = element_text(hjust=0.5),
legend.key = element_blank(),
legend.title = element_blank(),
axis.text = element_text(color = 'black'),
axis.line = element_line(color='black'))
